% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mle_negbinomial.R
\name{mle_negbinomial}
\alias{mle_negbinomial}
\title{mle_negbinomial}
\usage{
mle_negbinomial(
  df,
  eta = 0.001,
  lambda = 0.01,
  tol = 1e-04,
  maxIter = 10000,
  method = c("newton", "gdescent")
)
}
\arguments{
\item{df}{data.frame object, containing at least column named 'x' containing non-negative integer values.}

\item{eta}{positive numeric dampening parameter for Newton's method, gradient descent algorithm.}

\item{lambda}{non-negative numeric regularization parameter.}

\item{tol}{non-negative numeric tolerance parameter for exiting optimization algorithm.}

\item{maxIter}{positive integer setting maximum number of iterations for optimization algorithm.}

\item{method}{string controlling optimization method; default 'newton'.}
}
\value{
list containing MLE of negative binomial distribution parameters r and p, assuming df$x ~ nbinom(r, p).
}
\description{
mle_negbinomial
}
\examples{
# Generate example data:
set.seed(31)
r = 4
p = 0.3

# Number of experiments, i.e. rows in df:
numexps = 10

# Filling df with pseudo data; note the requisite column 'x':
df = data.frame('x' = rnbinom(numexps, r, p))

# Generating maximum likelihood estimate (MLE) solution for r and p:
rp_fit = mle_negbinomial(df = df)

# Compare fitted values to known values:
cbind(c(r, p), c(rp_fit$r, rp_fit$p))
}
