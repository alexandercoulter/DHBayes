% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/empb_beta_binomial_c.R
\name{empb_beta_binomial_c}
\alias{empb_beta_binomial_c}
\title{empb_beta_binomial_c}
\usage{
empb_beta_binomial_c(
  df,
  eta = 0.1,
  tol = 1e-05,
  maxIter = 10000,
  method = c("newton", "gdescent")
)
}
\arguments{
\item{df}{data.frame object, containing at least columns named 'x' containing non-negative integer values (number of successes), 'n' containing non-negative integer values (number of trials), and 'g' containing group labels.}

\item{eta}{positive numeric dampening parameter for Newton's method, gradient descent algorithm.}

\item{tol}{non-negative numeric tolerance parameter for exiting optimization algorithm.}

\item{maxIter}{positive integer setting maximum number of iterations for optimization algorithm.}

\item{method}{string controlling optimization method; default 'newton'.}
}
\value{
list object containing empirical Bayes (EMPB) estimates of a, b hyperparameters, assuming df$x ~ binom(p_g, df$n), and p_g ~ beta(a, b), where 'p_g' denotes a group-level parameter.
}
\description{
empb_beta_binomial_c
}
\examples{
# Generate example data:
set.seed(31)
a = 3
b = 9

# Number of groups:
NG = 10

# Creating group IDs:
g = replicate(NG, paste(sample(LETTERS, 10), sep="", collapse=""))

# Generating 'true' p parameters:
p = rbeta(length(g), a, b)

# Number of experiments, i.e. rows in df:
numexps = 100

# Filling df with pseudo data; note the requisite columns 'n', 'x', and 'g':
df = data.frame('n' = numeric(0), 'x' = numeric(0), 'g' = character(0))
for(k in 1:numexps){
  gk = sample(g, 1)
  nk = 5 + rpois(1, 10)
  xk = rbinom(1, nk, p[g == gk])
  df = rbind(df, data.frame('n' = nk, 'x' = xk, 'g' = gk))
}

# Generating empirical Bayes (EMPB) solutions for a, b:
ab_fit = empb_beta_binomial_c(df = df)

# Compare fitted values to known values:
cbind(c(a, b), c(ab_fit$a, ab_fit$b))
}
